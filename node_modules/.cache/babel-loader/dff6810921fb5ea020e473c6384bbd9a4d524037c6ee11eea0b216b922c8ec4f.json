{"ast":null,"code":"import { importData } from \"./api.js\";\nimport excel from \"@/libs/excel\";\nexport default {\n  name: \"line-chart\",\n  components: {},\n  props: {},\n  data() {\n    return {\n      importModalVisible: false,\n      importTableData: [],\n      importColumns: [],\n      reading: false,\n      uploadfile: {\n        name: \"\"\n      },\n      importLoading: false\n    };\n  },\n  methods: {\n    init() {},\n    startImportData() {\n      this.importModalVisible = true;\n    },\n    beforeUploadImport(file) {\n      this.uploadfile = file;\n      const fileExt = file.name.split(\".\").pop().toLocaleLowerCase();\n      if (fileExt == \"xlsx\" || fileExt == \"xls\") {\n        this.readFile(file);\n        this.file = file;\n      } else {\n        this.$Notice.warning({\n          title: \"文件类型错误\",\n          desc: \"所选文件‘ \" + file.name + \" ’不是EXCEL文件，请选择后缀为.xlsx或者.xls的EXCEL文件。\"\n        });\n      }\n      return false;\n    },\n    // 读取文件\n    readFile(file) {\n      this.reading = true;\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(file);\n      reader.onerror = e => {\n        this.reading = false;\n        this.$Message.error(\"文件读取出错\");\n      };\n      reader.onload = e => {\n        const data = e.target.result;\n        const {\n          header,\n          results\n        } = excel.read(data, \"array\");\n        const tableTitle = header.map(item => {\n          return {\n            title: item,\n            key: item,\n            minWidth: 130,\n            align: \"center\"\n          };\n        });\n        this.importTableData = results;\n        this.importColumns = tableTitle;\n        this.reading = false;\n        this.$Message.success(\"读取数据成功\");\n      };\n    },\n    clearImportData() {\n      this.importTableData = [];\n      this.importColumns = [];\n      this.uploadfile = {};\n    },\n    importData() {\n      this.importLoading = true;\n      importData(this.importTableData).then(res => {\n        this.importLoading = false;\n        if (res.success) {\n          this.importModalVisible = false;\n          this.$Modal.info({\n            title: \"导入结果\",\n            content: res.message\n          });\n        }\n      });\n    }\n  },\n  mounted() {\n    this.init();\n  }\n};","map":{"version":3,"names":["importData","excel","name","components","props","data","importModalVisible","importTableData","importColumns","reading","uploadfile","importLoading","methods","init","startImportData","beforeUploadImport","file","fileExt","split","pop","toLocaleLowerCase","readFile","$Notice","warning","title","desc","reader","FileReader","readAsArrayBuffer","onerror","e","$Message","error","onload","target","result","header","results","read","tableTitle","map","item","key","minWidth","align","success","clearImportData","then","res","$Modal","info","content","message","mounted"],"sources":["src/views/ele/threeAdminAsset/excel.vue"],"sourcesContent":["<template>\n<div class=\"card-line\" style=\"display: inline-block;\">\n    <Button @click=\"startImportData\" type=\"primary\" size=\"small\" ghost shape=\"circle\" icon=\"md-add\">初期元器件导入</Button>\n    <Drawer title=\"导入数据\" closable v-model=\"importModalVisible\" width=\"1000\">\n        <div style=\"\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n        \">\n            <Upload action :before-upload=\"beforeUploadImport\" accept=\".xls, .xlsx\">\n                <Button :loading=\"reading\" icon=\"ios-cloud-upload-outline\" style=\"margin-right: 10px\">上传Excel文件</Button>\n                <span v-if=\"uploadfile.name\">当前选择文件：{{ uploadfile.name }}</span>\n            </Upload>\n            <Button @click=\"clearImportData\" icon=\"md-trash\">清空数据</Button>\n        </div>\n        <Alert type=\"warning\" show-icon>导入前请下载查看导入模版数据文件查看所需字段及说明，确保数据格式正确，不得修改列英文名称</Alert>\n        <Table :columns=\"importColumns\" border :height=\"height\" :data=\"importTableData\" ref=\"importTable\"></Table>\n        <div class=\"drawer-footer\">\n            <!-- <Button @click=\"downloadTemple\" type=\"info\">下载导入模板</Button> -->\n            <div style=\"position: absolute; right: 15px; display: inline-block\">\n                <Button @click=\"importModalVisible = false\">关闭</Button>\n                <Button :loading=\"importLoading\" :disabled=\"importTableData.length <= 0\" @click=\"importData\" style=\"margin-left: 8px\" type=\"primary\">\n                    确认导入\n                    <span v-if=\"importTableData.length > 0\">{{ importTableData.length }} 条数据</span>\n                </Button>\n            </div>\n        </div>\n    </Drawer>\n</div>\n</template>\n\n<script>\nimport {\n    importData\n} from \"./api.js\";\nimport excel from \"@/libs/excel\";\nexport default {\n    name: \"line-chart\",\n    components: {},\n    props: {},\n    data() {\n        return {\n            importModalVisible: false,\n            importTableData: [],\n            importColumns: [],\n            reading: false,\n            uploadfile: {\n                name: \"\",\n            },\n            importLoading: false\n        };\n    },\n    methods: {\n        init() {},\n        startImportData() {\n            this.importModalVisible = true;\n        },\n        beforeUploadImport(file) {\n            this.uploadfile = file;\n            const fileExt = file.name.split(\".\").pop().toLocaleLowerCase();\n            if (fileExt == \"xlsx\" || fileExt == \"xls\") {\n                this.readFile(file);\n                this.file = file;\n            } else {\n                this.$Notice.warning({\n                    title: \"文件类型错误\",\n                    desc: \"所选文件‘ \" +\n                        file.name +\n                        \" ’不是EXCEL文件，请选择后缀为.xlsx或者.xls的EXCEL文件。\",\n                });\n            }\n            return false;\n        },\n        // 读取文件\n        readFile(file) {\n            this.reading = true;\n            const reader = new FileReader();\n            reader.readAsArrayBuffer(file);\n            reader.onerror = (e) => {\n                this.reading = false;\n                this.$Message.error(\"文件读取出错\");\n            };\n            reader.onload = (e) => {\n                const data = e.target.result;\n                const {\n                    header,\n                    results\n                } = excel.read(data, \"array\");\n                const tableTitle = header.map((item) => {\n                    return {\n                        title: item,\n                        key: item,\n                        minWidth: 130,\n                        align: \"center\"\n                    };\n                });\n                this.importTableData = results;\n                this.importColumns = tableTitle;\n                this.reading = false;\n                this.$Message.success(\"读取数据成功\");\n            };\n        },\n        clearImportData() {\n            this.importTableData = [];\n            this.importColumns = [];\n            this.uploadfile = {};\n        },\n        importData() {\n            this.importLoading = true;\n            importData(this.importTableData).then((res) => {\n                this.importLoading = false;\n                if (res.success) {\n                    this.importModalVisible = false;\n                    this.$Modal.info({\n                        title: \"导入结果\",\n                        content: res.message,\n                    });\n                }\n            });\n        },\n    },\n    mounted() {\n        this.init();\n    },\n};\n</script>\n\n<style lang=\"less\" scoped>\n.card-line {\n    .title-content {\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        font-size: 16px;\n        font-weight: 600;\n        color: #495057;\n        margin-bottom: 24px;\n\n        .sortby {\n            font-size: 14px;\n            cursor: pointer;\n            font-weight: 400;\n            color: #74788d;\n        }\n    }\n\n    .data-content {\n        display: flex;\n\n        .item {\n            display: flex;\n            align-items: baseline;\n            padding: 2px 20px;\n\n            .important {\n                color: #5b73e8;\n                font-weight: 500;\n                font-size: 24px;\n                margin-right: 16px;\n            }\n\n            .data {\n                color: #495057;\n                font-weight: 500;\n                font-size: 24px;\n                margin-right: 16px;\n            }\n\n            .desc {\n                color: #74788d;\n                font-size: 15px;\n                font-weight: 500;\n            }\n        }\n    }\n}\n</style>\n"],"mappings":"AAgCA,SACAA,UAAA,QACA;AACA,OAAAC,KAAA;AACA;EACAC,IAAA;EACAC,UAAA;EACAC,KAAA;EACAC,KAAA;IACA;MACAC,kBAAA;MACAC,eAAA;MACAC,aAAA;MACAC,OAAA;MACAC,UAAA;QACAR,IAAA;MACA;MACAS,aAAA;IACA;EACA;EACAC,OAAA;IACAC,KAAA;IACAC,gBAAA;MACA,KAAAR,kBAAA;IACA;IACAS,mBAAAC,IAAA;MACA,KAAAN,UAAA,GAAAM,IAAA;MACA,MAAAC,OAAA,GAAAD,IAAA,CAAAd,IAAA,CAAAgB,KAAA,MAAAC,GAAA,GAAAC,iBAAA;MACA,IAAAH,OAAA,cAAAA,OAAA;QACA,KAAAI,QAAA,CAAAL,IAAA;QACA,KAAAA,IAAA,GAAAA,IAAA;MACA;QACA,KAAAM,OAAA,CAAAC,OAAA;UACAC,KAAA;UACAC,IAAA,aACAT,IAAA,CAAAd,IAAA,GACA;QACA;MACA;MACA;IACA;IACA;IACAmB,SAAAL,IAAA;MACA,KAAAP,OAAA;MACA,MAAAiB,MAAA,OAAAC,UAAA;MACAD,MAAA,CAAAE,iBAAA,CAAAZ,IAAA;MACAU,MAAA,CAAAG,OAAA,GAAAC,CAAA;QACA,KAAArB,OAAA;QACA,KAAAsB,QAAA,CAAAC,KAAA;MACA;MACAN,MAAA,CAAAO,MAAA,GAAAH,CAAA;QACA,MAAAzB,IAAA,GAAAyB,CAAA,CAAAI,MAAA,CAAAC,MAAA;QACA;UACAC,MAAA;UACAC;QACA,IAAApC,KAAA,CAAAqC,IAAA,CAAAjC,IAAA;QACA,MAAAkC,UAAA,GAAAH,MAAA,CAAAI,GAAA,CAAAC,IAAA;UACA;YACAjB,KAAA,EAAAiB,IAAA;YACAC,GAAA,EAAAD,IAAA;YACAE,QAAA;YACAC,KAAA;UACA;QACA;QACA,KAAArC,eAAA,GAAA8B,OAAA;QACA,KAAA7B,aAAA,GAAA+B,UAAA;QACA,KAAA9B,OAAA;QACA,KAAAsB,QAAA,CAAAc,OAAA;MACA;IACA;IACAC,gBAAA;MACA,KAAAvC,eAAA;MACA,KAAAC,aAAA;MACA,KAAAE,UAAA;IACA;IACAV,WAAA;MACA,KAAAW,aAAA;MACAX,UAAA,MAAAO,eAAA,EAAAwC,IAAA,CAAAC,GAAA;QACA,KAAArC,aAAA;QACA,IAAAqC,GAAA,CAAAH,OAAA;UACA,KAAAvC,kBAAA;UACA,KAAA2C,MAAA,CAAAC,IAAA;YACA1B,KAAA;YACA2B,OAAA,EAAAH,GAAA,CAAAI;UACA;QACA;MACA;IACA;EACA;EACAC,QAAA;IACA,KAAAxC,IAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}